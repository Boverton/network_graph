{"version":3,"sources":["components/GraphContainer.js","App.js","serviceWorker.js","index.js"],"names":["GraphContainer","nextProps","nextState","nextContext","JSON","stringify","this","props","react_default","a","createElement","id","className","data","nodes","length","lib","config","nodeHighlightBehavior","height","width","node","color","size","fontSize","onClickNode","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addNewNode","name","stateClone","objectSpread","state","nodesClone","toConsumableArray","linksClone","links","filter","push","source","target","highlightColor","highlightStrokeColor","nodeNameInput","setState","nodeId","toggleSelectedNodes","selected","addLink","submitNodeName","event","preventDefault","value","updateInputValue","document","getElementById","replace","toUpperCase","updatedNodes","map","somethingSelected","newArrayString","sort","link","orderedLinks","deselectAllNodes","_this2","type","onChange","placeholder","autoComplete","onClick","GraphContainer_GraphContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36b12c58.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Graph} from \"react-d3-graph\";\nimport PropTypes from 'prop-types';\n\nexport default class GraphContainer extends Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return JSON.stringify(this.props) !== JSON.stringify(nextProps);\n    }\n\n    render() {\n        // the graph configuration, you only need to pass down properties\n        // that you want to override, otherwise default ones will be used\n        const myConfig = {\n            nodeHighlightBehavior: false,\n            height: 550,\n            width: 600,\n            node: {\n                color: 'lightgreen',\n                size: 400,\n                fontSize: 15,\n            },\n        };\n\n        return (\n            <div id=\"graph-container\">\n                <div\n                    id=\"overlay\"\n                    className={this.props.data.nodes.length === 1 ? \"show\" : \"\"}\n                >\n                    <div id=\"instructions\">\n                        <span className=\"title\">\n                            Add a node above to start your graph\n                        </span>\n                        <span>\n                            You can do the following:\n                        </span>\n                        <ul>\n                            <li>\n                                Drag and drop nodes\n                            </li>\n                            <li>\n                                Zoom in and out\n                            </li>\n                            <li>\n                                Create edges between 2 nodes\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <Graph\n                    id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n                    data={this.props.data}\n                    config={myConfig}\n                    onClickNode={this.props.onClickNode}\n                />\n            </div>\n        )\n    }\n};\n\nGraphContainer.propTypes = {\n  data: PropTypes.object.isRequired,\n  onClickNode: PropTypes.func.isRequired,\n};\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport GraphContainer from \"./components/GraphContainer\";\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n        nodes: [{id: '', color: 'transparent'}],\n        links: [],\n        selected: null,\n        nodeNameInput: '',\n    }\n  }\n\n  /**\n   * Add a new node to the graph\n   * @param name String\n   */\n  addNewNode = (name) => {\n    let stateClone = {...this.state};\n    let nodesClone = [...stateClone.nodes];\n    let linksClone = [...stateClone.links];\n\n    // check if we already have this node\n    if (nodesClone.filter( node => node.id === name).length > 0) {\n        return;\n    }\n\n    // add by name\n    nodesClone.push({id: name});\n    // add link to the initial empty node\n    //    if we don't do this the new node just sits in the upper left corner\n    //    linking it pulls it into view\n    linksClone.push({\n      source: name,\n      target: \"\",\n      color: \"transparent\",\n      highlightColor: \"SAME\",\n      highlightStrokeColor: \"SAME\"\n    });\n\n    // pull mutated node/link arrays back onto the copy of the state\n    stateClone.nodes = nodesClone;\n    stateClone.links = linksClone;\n    stateClone.nodeNameInput = '';\n\n    // replace state with updated clone\n    this.setState(stateClone);\n  };\n\n  /**\n   * Triggered when user clicks on a node\n   * actions taken:\n   *    Toggle selected UI\n   *    if 2nd node clicked create link\n   * @param nodeId\n   */\n  onClickNode = (nodeId) => {\n    let stateClone = {...this.state};\n    this.toggleSelectedNodes(stateClone, nodeId);\n\n    // if not same node clicked and already have one selected create link\n    if (nodeId !== this.state.selected && this.state.selected !== null) {\n      this.addLink(nodeId, this.state.selected);\n      return;\n    }\n\n    this.setState(stateClone);\n  };\n\n    /**\n     * Use the nodeNameInput to create a new node\n     *\n     * @param event\n     */\n  submitNodeName = (event) => {\n      event.preventDefault();\n      let value = this.state.nodeNameInput;\n      // don't add node if empty\n      if (value === \"\") {\n          return;\n      }\n      this.addNewNode(value);\n  };\n\n    /**\n     * keep state in sync with the node-name-input input field\n     */\n  updateInputValue = () => {\n    // keep it alpha/numeric with no spaces and uppercase.\n    let value = document.getElementById('node-name-input').value\n        .replace(/[^a-zA-Z0-9]/g, '')\n        .toUpperCase();\n\n    this.setState({nodeNameInput: value})\n  };\n\n  //   /**\n  //    * Not part of the initial requirements, future possible feature\n  //    * @param source\n  //    * @param target\n  //    */\n  // onClickLink = (source, target) => {\n  //     let stateClone = {...this.state},\n  //         sourceTargetArray = [source, target].sort(),\n  //         sourceTargetString = JSON.stringify((sourceTargetArray));//\n  //\n  //     let filteredLinks = stateClone.links.filter(link => {\n  //             let orderedString= JSON.stringify([link.source, link.target].sort());\n  //             return link.color === undefined\n  //             && sourceTargetString !== orderedString\n  //         }\n  //     );\n  //\n  //     stateClone.links = filteredLinks;\n  //     this.setState(stateClone);\n  // };\n\n  /**\n   * remove color property from all nodes (except default 0 node, needs to stay 'transparent')\n   * @param stateClone\n   */\n  deselectAllNodes(stateClone) {\n    let updatedNodes = stateClone.nodes.map( node => {\n      // keep default node as is\n      if (node.id === \"\") {\n        return node;\n      }\n      return {id: node.id};\n    });\n\n    stateClone.selected = null;\n    stateClone.nodes = updatedNodes;\n  }\n\n  /**\n   * toggles a selected node 'red' or not\n   * @param stateClone\n   * @param nodeId\n   * @returns {*}\n   */\n  toggleSelectedNodes(stateClone, nodeId) {\n    let somethingSelected;\n\n    let updatedNodes = stateClone.nodes.map(node => {\n      if (node.id === nodeId && stateClone.selected !== nodeId) {\n        somethingSelected = true;\n        return {id: node.id, color: \"red\"};\n      }\n      // keep default node as is, with transparent color\n      else if (node.id === \"\") {\n        return node;\n      } else {\n        return {id: node.id};\n      }\n    });\n\n    // clear selected if nothing has been selected\n    stateClone.selected = somethingSelected ? nodeId : null;\n    stateClone.nodes = updatedNodes;\n\n    return stateClone;\n  };\n\n  /**\n   * Add a link between nodes\n   * @param source String\n   * @param target String\n   */\n  addLink(source, target) {\n    let stateClone = {...this.state},\n        linksClone = [...stateClone.links];\n\n      let newArrayString = JSON.stringify([source, target].sort());\n\n      let duplicates = linksClone.filter( link => {\n          let orderedLinks = JSON.stringify([link.source, link.target].sort());\n          return newArrayString === orderedLinks;\n      });\n\n      if (duplicates.length > 0) {\n          return;\n      }\n\n    // add new connection to copy of link\n    linksClone.push({source: source, target: target});\n\n    this.deselectAllNodes(stateClone);\n\n    // remove default link to the default node\n    stateClone.links = linksClone;\n\n    this.setState(stateClone);\n  };\n\n  render() {\n    // graph payload (with minimalist structure)\n    const data = {\n      nodes: this.state.nodes,\n      links: this.state.links\n    };\n\n    return (\n        <div>\n            <div id=\"header\">\n                <span>\n                    Welcome To Your Graph\n                </span>\n                <form>\n                    <input\n                        type=\"text\"\n                        id=\"node-name-input\"\n                        value={this.state.nodeNameInput}\n                        onChange={this.updateInputValue}\n                        placeholder=\"Add a node here\"\n                        autoComplete=\"off\"\n                    />\n                    <button type=\"submit\"\n                        onClick={(event) => this.submitNodeName(event)}\n                    >\n                        Add Node\n                    </button>\n                </form>\n            </div>\n            <GraphContainer\n                data={data}\n                onClickNode={this.onClickNode}\n            />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}